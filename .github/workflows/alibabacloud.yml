<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Al~muhammady Futuristics Designs</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(to bottom, #0a0a2a, #000);
      color: white;
    }
    header {
      text-align: center;
      padding: 2rem;
      background: #001f3f;
    }
    header h1 {
      color: #1E90FF;
      font-size: 2rem;
    }
    header p {
      color: #ccc;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      padding: 2rem;
    }
    .card {
      background: #111;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(30, 144, 255, 0.5);
      text-align: center;
      cursor: pointer;
    }
    .card img {
      width: 100%;
      height: 180px;
      object-fit: cover;
    }
    .card h2 {
      margin: 0.5rem 0;
    }
    button {
      background: #1E90FF;
      border: none;
      padding: 0.5rem 1rem;
      color: white;
      border-radius: 8px;
      cursor: pointer;
      margin: 0.5rem;
    }
    button:hover {
      background: #187bcd;
    }
    footer {
      text-align: center;
      padding: 1rem;
      border-top: 1px solid #333;
      margin-top: 2rem;
      color: #777;
    }

    /* Lightbox */
    .lightbox {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }
    .lightbox img {
      max-width: 90%;
      max-height: 70%;
    }
    .lightbox .close {
      position: absolute;
      top: 20px;
      right: 40px;
      font-size: 30px;
      cursor: pointer;
    }
    .lightbox .arrow {
      position: absolute;
      top: 50%;
      font-size: 40px;
      cursor: pointer;
      user-select: none;
    }
    .lightbox .arrow.left {
      left: 20px;
    }
    .lightbox .arrow.right {
      right: 20px;
    }
  </style>
</head>
<body>
  <header>
    <h1>Al~muhammady Futuristics Designs</h1>
    <p>Everything about GRAPHICS – World-class futuristic creativity</p>
  </header>

  <section class="grid">
    <div class="card" onclick="openLightbox(0)">
      <img src="logos-sample.jpg" alt="Logos"/>
      <h2>Logos</h2>
      <button onclick="event.stopPropagation(); chatWhatsApp('Logos')">Chat on WhatsApp</button>
    </div>
    <div class="card" onclick="openLightbox(1)">
      <img src="flyers-sample.jpg" alt="Flyers"/>
      <h2>Flyers</h2>
      <button onclick="event.stopPropagation(); chatWhatsApp('Flyers')">Chat on WhatsApp</button>
    </div>
    <div class="card" onclick="openLightbox(2)">
      <img src="posters-sample.jpg" alt="Posters"/>
      <h2>Posters</h2>
      <button onclick="event.stopPropagation(); chatWhatsApp('Posters')">Chat on WhatsApp</button>
    </div>
    <div class="card" onclick="openLightbox(3)">
      <img src="social-sample.jpg" alt="Social Media"/>
      <h2>Social Media Graphics</h2>
      <button onclick="event.stopPropagation(); chatWhatsApp('Social Media Graphics')">Chat on WhatsApp</button>
    </div>
    <div class="card" onclick="openLightbox(4)">
      <img src="photo-sample.jpg" alt="Photo Editing"/>
      <h2>Photo Editing</h2>
      <button onclick="event.stopPropagation(); chatWhatsApp('Photo Editing')">Chat on WhatsApp</button>
    </div>
  </section>

  <!-- Lightbox -->
  <div id="lightbox" class="lightbox">
    <span class="close" onclick="closeLightbox()">&times;</span>
    <span class="arrow left" onclick="prevImage()">&#10094;</span>
    <img id="lightbox-img" src="" alt="Preview"/>
    <span class="arrow right" onclick="nextImage()">&#10095;</span>
  </div>

  <footer>
    © <span id="year"></span> Almuhammadyfuturisticsgraphics. All rights reserved.
  </footer>

  <script>
    const whatsappNumber = "2348149369370"; // your real WhatsApp number
    function chatWhatsApp(service) {
      const url = `https://wa.me/${whatsappNumber}?text=Hello, I am interested in your ${service}`;
      window.open(url, "_blank");
    }

    document.getElementById("year").textContent = new Date().getFullYear();

    // Lightbox logic
    const images = [
      "logos-sample.jpg",
      "flyers-sample.jpg",
      "posters-sample.jpg",
      "social-sample.jpg",
      "photo-sample.jpg"
    ];
    let currentIndex = 0;

    function openLightbox(index) {
      currentIndex = index;
      document.getElementById("lightbox").style.display = "flex";
      document.getElementById("lightbox-img").src = images[currentIndex];
    }
    function closeLightbox() {
      document.getElementById("lightbox").style.display = "none";
    }
    function prevImage() {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      document.getElementById("lightbox-img").src = images[currentIndex];
    }
    function nextImage() {
      currentIndex = (currentIndex + 1) % images.length;
      document.getElementById("lightbox-img").src = images[currentIndex];
    }

    // Swipe support for mobile
    let startX = 0;
    const lightbox = document.getElementById("lightbox");
    lightbox.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
    });
    lightbox.addEventListener("touchend", (e) => {
      const endX = e.changedTouches[0].clientX;
      if (startX - endX > 50) nextImage();
      if (endX - startX > 50) prevImage();
    });
  </script>
</body>
</html> This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-hangzhou
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  NAMESPACE: namespace
  IMAGE: repo
  TAG: ${{ github.sha }}
  ACK_CLUSTER_ID: clusterID
  ACK_DEPLOYMENT_NAME: nginx-deployment

  ACR_EE_REGISTRY: myregistry.cn-hangzhou.cr.aliyuncs.com
  ACR_EE_INSTANCE_ID: instanceID
  ACR_EE_NAMESPACE: namespace
  ACR_EE_IMAGE: repo
  ACR_EE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 1.1 Login to ACR
    - name: Login to ACR with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"

    # 1.2 Build and push image to ACR
    - name: Build and push image to ACR
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # 1.3 Scan image in ACR
    - name: Scan image in ACR
      uses: aliyun/acr-scan@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
        tag: "${{ env.TAG }}"

    # 2.1 (Optional) Login to ACR EE
    - uses: actions/checkout@v4
    - name: Login to ACR EE with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        login-server: "https://${{ env.ACR_EE_REGISTRY }}"
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"

    # 2.2 (Optional) Build and push image ACR EE
    - name: Build and push image to ACR EE
      run: |
        docker build -t "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG" .
        docker push "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG"
    # 2.3 (Optional) Scan image in ACR EE
    - name: Scan image in ACR EE
      uses: aliyun/acr-scan@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"
        repository: "${{ env.ACR_EE_NAMESPACE}}/${{ env.ACR_EE_IMAGE }}"
        tag: "${{ env.ACR_EE_TAG }}"

    # 3.1 Set ACK context
    - name: Set K8s context
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ env.ACK_CLUSTER_ID }}"

    # 3.2 Deploy the image to the ACK cluster
    - name: Set up Kustomize
      run: |-
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash /dev/stdin 3.8.6
    - name: Deploy
      run: |-
        ./kustomize edit set image REGISTRY/NAMESPACE/IMAGE:TAG=$REGISTRY/$NAMESPACE/$IMAGE:$TAG
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$ACK_DEPLOYMENT_NAME
        kubectl get services -o wide
